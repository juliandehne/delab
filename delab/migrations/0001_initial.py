# Generated by Django 3.1.7 on 2021-10-19 14:22

import delab.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='ConversationFlow',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(default='default.jpg', upload_to='sa_flow_pics')),
            ],
        ),
        migrations.CreateModel(
            name='SADictionary',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dictionary_string', models.TextField()),
                ('title', models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='SimpleRequest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=2000, validators=[django.core.validators.RegexValidator('(^\\#[a-zäöüA-ZÖÄÜ]+(\\ \\#[a-zA-ZÖÄÜ]+)*$)', 'Please enter hashtags seperated by spaces!'), delab.models.validate_exists])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('max_data', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Timeline',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('author_id', models.IntegerField()),
                ('tweet_id', models.IntegerField(unique=True)),
                ('text', models.TextField()),
                ('created_at', models.DateTimeField()),
                ('conversation_id', models.IntegerField(null=True)),
                ('in_reply_to_user_id', models.IntegerField(null=True)),
                ('lang', models.TextField()),
                ('ft_vector_dump', models.BinaryField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='TopicDictionary',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('word', models.CharField(max_length=200, unique=True)),
                ('ft_vector', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Tweet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tn_ancestors_pks', models.TextField(blank=True, default='', editable=False, verbose_name='Ancestors pks')),
                ('tn_ancestors_count', models.PositiveSmallIntegerField(default=0, editable=False, verbose_name='Ancestors count')),
                ('tn_children_pks', models.TextField(blank=True, default='', editable=False, verbose_name='Children pks')),
                ('tn_children_count', models.PositiveSmallIntegerField(default=0, editable=False, verbose_name='Children count')),
                ('tn_depth', models.PositiveSmallIntegerField(default=0, editable=False, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)], verbose_name='Depth')),
                ('tn_descendants_pks', models.TextField(blank=True, default='', editable=False, verbose_name='Descendants pks')),
                ('tn_descendants_count', models.PositiveSmallIntegerField(default=0, editable=False, verbose_name='Descendants count')),
                ('tn_index', models.PositiveSmallIntegerField(default=0, editable=False, verbose_name='Index')),
                ('tn_level', models.PositiveSmallIntegerField(default=1, editable=False, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)], verbose_name='Level')),
                ('tn_priority', models.PositiveSmallIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(9999)], verbose_name='Priority')),
                ('tn_order', models.PositiveSmallIntegerField(default=0, editable=False, verbose_name='Order')),
                ('tn_siblings_pks', models.TextField(blank=True, default='', editable=False, verbose_name='Siblings pks')),
                ('tn_siblings_count', models.PositiveSmallIntegerField(default=0, editable=False, verbose_name='Siblings count')),
                ('twitter_id', models.IntegerField(unique=True)),
                ('text', models.TextField()),
                ('author_id', models.IntegerField()),
                ('in_reply_to_status_id', models.IntegerField(null=True)),
                ('in_reply_to_user_id', models.IntegerField(null=True)),
                ('created_at', models.DateTimeField()),
                ('sentiment_value', models.FloatField(null=True)),
                ('sentiment', models.TextField(null=True)),
                ('conversation_id', models.IntegerField()),
                ('language', models.TextField(default='unk')),
                ('bertopic_id', models.IntegerField(null=True)),
            ],
            options={
                'verbose_name': 'Tweet',
                'verbose_name_plural': 'Tweets',
            },
        ),
        migrations.CreateModel(
            name='TwTopic',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
            ],
        ),
        migrations.AddConstraint(
            model_name='twtopic',
            constraint=models.UniqueConstraint(fields=('title',), name='unique_topic_constraint_title'),
        ),
        migrations.AddField(
            model_name='tweet',
            name='conversation_flow',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='delab.conversationflow'),
        ),
        migrations.AddField(
            model_name='tweet',
            name='simple_request',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='delab.simplerequest'),
        ),
        migrations.AddField(
            model_name='tweet',
            name='tn_parent',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tn_children', to='delab.tweet', verbose_name='Parent'),
        ),
        migrations.AddField(
            model_name='tweet',
            name='topic',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='delab.twtopic'),
        ),
        migrations.AddField(
            model_name='simplerequest',
            name='topic',
            field=models.ForeignKey(default=delab.models.get_sentinel_topic, on_delete=django.db.models.deletion.DO_NOTHING, to='delab.twtopic'),
        ),
    ]
